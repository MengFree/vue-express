#!/usr/bin/env node

/**
 * Module dependencies.
 */

var api_app = require('../app');
var debug = require('debug')('tee:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var api_port = normalizePort(process.env.PORT || '3000');
api_app.set('port', api_port);

/**
 * Create HTTP server.
 */

var api_server = http.createServer(api_app);

/**
 * Listen on provided port, on all network interfaces.
 */

api_server.listen(api_port);
api_server.on('error', onError);
api_server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var api_port = parseInt(val, 10);

    if (isNaN(api_port)) {
        // named pipe
        return val;
    }

    if (api_port >= 0) {
        // port number
        return api_port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof api_port === 'string' ?
        'Pipe ' + api_port :
        'Port ' + api_port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = api_server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}